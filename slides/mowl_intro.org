#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+OPTIONS: H:1
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+BEAMER_THEME: Madrid
#+options: ':nil *:t -:t ::t <:t \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:nil todo:t |:t
#+title: mOWL: Python library for machine learning with biomedical ontologies
#+date: <2023-02-13>
#+author: Fernando Zhapa-Camacho
#+email: fernando.zhapacamacho@kaust.edu.sa
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.3)


* Ontologies

** Ontolgies information                                           :B_column:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_COL: 0.4
:END:
Ontologies contain information on different axes:

  - Classes and relations
  - Domain vocabulary
  - Descriptions
  - Axioms  

** Picture                                                         :B_column:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_COL: 0.6
:END:
#+CAPTION: Components of ontologies
#+NAME: fig.ont_repr
#+ATTR_ORG: :width 400
#+ATTR_LATEX: :height 5cm
[[../notebooks/figs/mowl_intro/ont_repr2.jpg]]


* Ontologies use

  - <1-> Ontologies provide background knowledge for a domain
  - <2-> That knowledge can be leveraged by a machine learning model


* mOWL: Ontology-centric-designed library

** What is mOWL                                                    :B_column:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_COL: 0.5
:END:

  - <1-> Python library to integrate ontologies and machine learning models
  - <2-> Interfaces OWLAPI (which is written in Java)

** mOWL components                                                 :B_column:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_COL: 0.5
:END:


  - <3-> Ontology Management
  - <4-> Ontology Transformation
  - <5-> Embedding Generation
  - <6-> Embedding Post-processing

* Ontology Management
mOWL provides methods to manipulate ontologies: 
- creation
- modification
- reasoning

mOWL interfaces the OWLAPI


* Ontology Transformation

 mOWL provides functionalities to transform ontologies and/or extract information in different ways:



*** Graphs                                                         :B_column:
    :PROPERTIES:
    :BEAMER_COL: 0.33
    :BEAMER_env: column
    :END:


    #+CAPTION: To graphs
    #+NAME: fig.ont_repr
    #+ATTR_ORG: :width 400
    #+ATTR_LATEX: :height 4cm
    [[../notebooks/figs/mowl_intro/ont2graph.jpg]]
    
*** Text                                                           :B_column:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_COL: 0.33
    :END:

    #+CAPTION: To text
    #+NAME: fig.ont_repr
    #+ATTR_ORG: :width 400
    #+ATTR_LATEX: :height 4cm
    [[../notebooks/figs/mowl_intro/ont2text.jpg]]

*** Axioms                                                         :B_column:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_COL: 0.33
    :END:
    
    #+CAPTION: To axioms
    #+NAME: fig.ont_repr
    #+ATTR_ORG: :width 400
    #+ATTR_LATEX: :height 3.8cm
    [[../notebooks/figs/mowl_intro/ont2axioms.jpg]]


* Ontology Transformation: Graphs

- We call /projection/ to the process of transforming an ontology into a graph.
- There are many methods to project an ontology.
- In general, every projection undergoes some kind of /loss of information/




* Graph projections in mOWL

mOWL provides several projection methods:
- Taxonomy
- Taxonomy + existential relations
- DL2Vec
- OWL2Vec*

* Ontology Transformation: Graphs

*** mOWL code                                                       :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+begin_src python
from mowl.projection import DL2VecProjector
projector = DL2VecProjector(True)
#+end_src
    

* Ontology Transformation: Text

This approach uses the syntactic information of the axioms and
generates text sentences out of them.

- Axioms are defined over a syntax (symbols, operators, ...)
- Syntactic elements can be represented as words
- Onto2Vec, OPA2Vec

* Ontology Transformation: Axioms

Some methods would require preprocessing of axioms:

- Normalization (ELEmbeddings, ELBoxEmbeddings)
- Grouping into common structural patterns (FALCON)
